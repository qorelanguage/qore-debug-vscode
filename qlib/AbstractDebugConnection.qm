# -*- mode: qore; indent-tabs-mode: nil -*-

/*  AbstractDebugConnection.qm Copyright 2017 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

%require-types
%enable-all-warnings
%new-style
%strict-args

module AbstractDebugConnection {
    version = "0.1";
    desc    = "AbstractDebugConnection";
    author  = "Ondrej Musil <ondrej.musil@qoretechnologies.com>";
    url     = "https://github.com/qorelanguage/qore-debug-vscode";
}

%requires ./DebugEventListener.qm

#! Debugging parameters given by VS Code
public hashdecl DebugParams {
    #! Path to the debugged Qore program
    string programPath;

    #! Whether the debugger should stop before launching the program.
    bool stopOnEntry;
}

#! Abstract debug connection
public class AbstractDebugConnection {
    private {
        # listener for debug events returned from debugger
        DebugEventListener listener;

        # debugging parameters
        hash<DebugParams> params;
    }

    public constructor(DebugEventListener l, hash<DebugParams> debugParams) {
        listener = l;
        params = debugParams;
    }

    abstract private connect();
    abstract public *hash launch();
    abstract public disconnect(bool terminate = True);

    # CONTROL REQUESTS

    abstract public continue_(int threadId);
    abstract public next(int threadId);
    abstract public pause(int threadId);
    abstract public stepIn(int threadId, *int targetId);
    abstract public stepOut(int threadId);

    # INFO REQUESTS

    abstract public hash stackTrace(int threadId, *int startFrame, *int levels, *hash format);
    abstract public hash scopes(int frameId);
    abstract public hash variables(int varRef, *string filter, *int start, *int count, *hash format);
    abstract public hash source(int srcRef, *hash src);
    abstract public *list threads();
    abstract public hash modules(*int start, *int count);
    abstract public hash evaluate(string expr, *int frameId, *string cont, *hash format);
    abstract public hash exceptionInfo(int threadId);
}
