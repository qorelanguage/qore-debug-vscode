# -*- mode: qore; indent-tabs-mode: nil -*-

/*  LocalDebugConnection.qm Copyright 2017 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

%require-types
%enable-all-warnings
%new-style
%strict-args

%allow-debugger

module LocalDebugConnection {
    version = "0.1";
    desc    = "LocalDebugConnection";
    author  = "Ondrej Musil <ondrej.musil@qoretechnologies.com>";
    url     = "https://github.com/qorelanguage/qore-debug-vscode";
}

%requires process
%requires yaml

%requires ./AbstractDebugConnection.qm
%requires ./DebugEventListener.qm
%requires DebugUtil
%requires WebSocketClient

hashdecl ProgramInfo {
    # script name
    string scriptName;
}

hashdecl ThreadInfo {
    # VSCode program ID
    string pgmId;

    # Qore tid
    int tid;
}

hashdecl BreakpointInfo {
    # VSCode program ID
    string pgmId;

    # enabled flag
    bool enabled = False;
}

hashdecl DebugSession {
    # hash of programs; keys are integer IDs for VSCode
    hash<string, hash<ProgramInfo>> pgms;

    # hash of threads; keys are integer IDs for VSCode
    hash<string, hash<ThreadInfo>> threads;

    # hash of threads; keys are integer IDs for VSCode
    hash<string, hash<BreakpointInfo>> bps;
}

/*class LocalDebugProgramControl inherits DebugProgramControl {
    public {
        # listener for debug events returned from debugger
        *DebugEventListener listener;

        # parent debug connection
        LocalDebugConnection conn;
    }

    constructor(string serverName, *DebugEventListener l, LocalDebugConnection c) : DebugProgramControl(serverName) {
        conn = c;
        registerConnection(conn.cx);
    }

    destructor() {
        unregisterConnection(conn.cx);
    }

    public nothing sendDataImpl(hash cx, any data) {
        if (conn.counter.getCount() > 0) {
            conn.threadData = data;
            conn.counter.dec();
        } else {
            if (listener)
                listener.handleDebugEvent(data);
        }
    }

    public nothing broadcastDataImpl(any data) {
        if (listener)
            listener.handleDebugEvent(data);
    }
}*/

public class DbgLogger {
    public log(int verbosity, string fmt) {
        FileOutputStream fos("/home/omusil/qda.debug.log", True);
        string logmsg = vprintf(fmt+"\n", argv);
        fos.write(binary(logmsg));
        fos.close();
    }
}

#! Debug connection
public class LocalDebugConnection inherits AbstractDebugConnection {
    public {
        const WSC_TIMEOUT = 1500ms;

        # logger
        DbgLogger logger();

        # connection context
        hash cx = {'id': 1};

        # sync counter
        Counter counter();

        # qdbg-server process
        *Process server;

        # qdbg-server port
        int serverPort = 41234;

        string serverName;
        string serverUrl;

        int pendingUid;
        auto recData;
        *WebSocketClient wsc;
        timeout wscTimeout;
		bool connecting;

        # session info
        hash<DebugSession> session();

        #int pgmIdCounter = 0;
        #int threadIdCounter = 0;
        int bpIdCounter = 0;
    }

    private {
        # connection/server name for DebugProgramControl
        string connectionName;
    }

    public constructor(DebugEventListener l, hash<DebugParams> debugParams) : AbstractDebugConnection(l, debugParams) {
        wscTimeout = WSC_TIMEOUT;
        # TODO check options for timeout

        hash opts;
        opts.log = \wscLog();
        opts.errlog = \wscErr();
        opts.debuglog = \wscDebug();
        opts.url = "ws://127.0.0.1:" + string(serverPort);
        serverUrl = opts.url;
        wsc = new WebSocketClient(\wscEvent(), opts);
        #connect();
    }

    public destructor() {
        disconnect();
        delete wsc;
        terminateServer();
    }

    public wscEvent(*data msg) {
        logger.log(2, "received: %y", msg);
        if (!exists msg)
            return;
        listener.handleDebugEvent(msg);
        try {
            auto d = parse_yaml(msg);
            if (counter.getCount() > 0) {
                if ((d.type == "response" && pendingUid == d.uid && !connecting) ||
                    (d.type == "event" && d.cmd == "welcome" && connecting) ) {
                    recData = d;
                    counter.dec();
                    connecting = False;
                    return;
                }
            }
            #printData(d);
        } catch (hash<ExceptionInfo> ex) {
            wscErr(sprintf("wscEvent: %y", ex));
        }
    }

    public wscLog(string fmt) {
        logger.log(1, fmt, argv);
    }

    public wscDebug(string fmt) {
        logger.log(2, fmt, argv);
    }

    public wscErr(string fmt) {
        stderr.printf(fmt+"\n", argv);
    }

    private startServer() {
        list args = ("-l", "127.0.0.1:" + string(serverPort), params.programPath);
        server = new Process("qdbg-server", args);
    }

    private terminateServer() {
        try {
            if (server) {
                server.terminate();
                delete server;
            }
        }
        catch (ex) {}
    }

    private connect() {
        connecting = True;
        counter.inc();
		hash hh = wsc.connect();
        *string prot_ver = hh{QoreDebugWsProtocolHeader.lwr()};
        if (!prot_ver.val())
            throw "QORE-DEBUG", sprintf("Connected to %y, but no %y header received in response; check the URI path and try again", serverUrl, QoreDebugWsProtocolHeader);
        if (prot_ver != QoreDebugProtocolVersion)
            throw "QORE-DEBUG", sprintf("Qore debug server at %y claims unsupported protocol version %y; expecting %y", serverUrl, prot_ver, QoreDebugProtocolVersion);
        if (counter.waitForZero(wscTimeout)) {
            throw "QORE-DEBUG", "No response from debug server";
        } else {
            serverName = recData.result;
        }
    }

    private *hash doCommand(hash data) {
        #if (!wsc.isOpen()) throw

        # prepare data for sending
        pendingUid = clock_getmicros();
        data.uid = pendingUid;
        string d = make_yaml(data);

        # prepare the counter
        while (counter.getCount() > 0) {
            counter.dec();
        }
        counter.inc();

        # null the data
        recData = NOTHING;

        # log
        logger.log(0, "send: %y", d);

        # send and receive
        wsc.send(d);
        if (counter.waitForZero(wscTimeout)) {
            return NOTHING;
        } else {
            return recData;
        }
    }

    private generateConnectionDetails() {
        int id = abs(rand());
        cx = {'id': id};
        connectionName = "vscode_" + string(id);
    }

    public *hash launch() {
        startServer();
        sleep(1s);
        connect();

        if (params.stopOnEntry) {
            # return "stopped on entry" event
            return {
                "reason": "entry",
			    "description": "stopped on entry",
			    #"threadId": number,
			    #"text": string,
                "allThreadsStopped": True
            };
        }
        return NOTHING;
    }

    public disconnect(bool terminate = True) {
        logger.log(0, "disconnecting websocket client");
        if (wsc)
            wsc.disconnect();
        logger.log(0, "disconnected");
    }

    # CONTROL REQUESTS

    public continue_(int threadId) {
        # TODO
        logger.log(0, "continue command: %d", threadId);

        hash data.cmd = 'thread/go';
        data.tid = threadId;
        doCommand(data);
        logger.log(0, "after continue command");
    }

    public next(int threadId) {
        # TODO
    }

    public pause(int threadId) {
        if (!session.threads.hasKey(string(threadId)))
            throw "PAUSE-ERROR", sprintf("thread #%d doesn't exist", threadId);
        string tid = string(threadId);
        hash data.cmd = 'program/' + session.threads{tid}.pgmId + '/thread/' + tid + '/stop';
        doCommand(data);
    }

    public stepIn(int threadId, *int targetId) {
        # TODO
    }

    public stepOut(int threadId) {
        # TODO
    }

    # INFO REQUESTS

    public hash stackTrace(int threadId, *int startFrame, *int levels, *hash format) {
        # TODO
        hash data.cmd = 'thread/stack';
        data.tid = threadId;
        *hash th = doCommand(data);

        if (th) {
            #stdout.printf("TID %d call stack:\r\n", th.tid);
            foreach hash lh in (th.result) {
                string str = sprintf(" - %d%s: ", $#, lh.current ? "*":" ");
                if (lh.function.val())
                    str += sprintf("%s()", lh.function);
                else
                    str += "<unknown function>";
                str += " (";
                string loc;
                if (lh.source)
                    loc += sprintf("%s:%d", lh.source, lh.line + lh.offset);
                else {
                    loc += sprintf("%s", lh.file ?? "<unknown>");
                    if (lh.line > 0)
                        loc += sprintf(":%d", lh.line);
                }
                if (lh.endline > 0)
                    loc += sprintf("-%d", lh.endline + lh.offset);
                if (loc)
                    str += loc + " ";
                str += lh.type;
                str += ")";
                #stdout.print(str + "\r\n");
            }
        }
        else {
            throw "NO-RESPONSE", "server returned no response";
        }

        /*
        'bt': (
            'desc': 'get stack for current thread',
            'action': sub(DebugCommandLine dcl, softlist path, softlist args) {
                hash data.cmd = 'thread/stack';
                data.tid = dcl.checkThreadId();
                *hash th = dcl.doCommandImpl(data);
                if (th) {
                    stdout.printf("TID %d call stack:\r\n", th.tid);
                    foreach hash lh in (th.result) {
                        string str = sprintf(" - %d%s: ", $#, lh.current ? "*":" ");
                        if (lh.function.val())
                            str += sprintf("%s()", lh.function);
                        else
                            str += "<unknown function>";
                        str += " (";
                        string loc;
                        if (lh.source)
                            loc += sprintf("%s:%d", lh.source, lh.line + lh.offset);
                        else {
                            loc += sprintf("%s", lh.file ?? "<unknown>");
                            if (lh.line > 0)
                                loc += sprintf(":%d", lh.line);
                        }
                        if (lh.endline > 0)
                            loc += sprintf("-%d", lh.endline + lh.offset);
                        if (loc)
                            str += loc + " ";
                        str += lh.type;
                        str += ")";
                        stdout.print(str + "\r\n");
                    }
                }
                else
                    stdout.print("server returned no response\r\n");
            },
        ),
        */
        return {};
    }

    public hash scopes(int frameId) {
        # TODO
        return {};
    }

    public hash variables(int varRef, *string filter, *int start, *int count, *hash format) {
        # TODO
        /*
        'local': (
            '*': (
                'enum': list sub(DebugCommandLine dcl, softlist path, softlist args) {
                    hash data.cmd = 'thread/local/'+pop path+'/list';
                    data.tid = dcl.checkThreadId();
                    *hash sd = dcl.doCommandImpl(data);
                    return sd.result ?? ();
                },
                'action': sub(DebugCommandLine dcl, softlist path, softlist args) {
                    string var = pop path;
                    hash data.cmd = 'thread/local/'+var+'/';
                    data.tid = dcl.checkThreadId();
                    if (args) {
                        data.cmd += 'set';
                        data.value = call_function_args(\dcl.parseValue(), args);
                        dcl.doCommand(data);
                        stdout.printf("%s: value set to: %y\r\n", var, data.value);
                    } else {
                        data.cmd += 'get';
                        *hash vh = dcl.doCommandImpl(data);
                        if (!vh) {
                            stdout.printf("there is no local var %y; use \"thread local\" to list local vars in this frame\r\n", var);
                        }
                        else {
                            dcl.printVar(var, vh.result.value);
                        }
                    }
                },
            ),

            'action': sub(DebugCommandLine dcl, softlist path, softlist args) {
                hash data.cmd = 'thread/local//list';
                data.tid = dcl.checkThreadId();
                *list tl = dcl.doCommandImpl(data).result;
                if (tl)
                    stdout.printf("local vars in frame %d: %s\r\n", data.tid, (foldl $1 + ", " + $2, tl));
                else
                    stdout.printf("no local vars in frame %d\r\n", data.tid);
            },
            'desc': 'get/set local variable, args: varName [value]',
        ),
        */
        return {};
    }

    public hash source(int srcRef, *hash src) {
        # TODO
        return {};
    }

    public *list threads() {
        updateSession();
        if (session.threads) {
            list result;
            map result += {"id": int($1.key), "name": getThreadName($1.key, $1.value)}, session.threads.pairIterator();
            return result;
        }

        return NOTHING;
    }

    public hash modules(*int start, *int count) {
        # TODO
        return {};
    }

    public hash evaluate(string expr, *int frameId, *string cont, *hash format) {
        # TODO
        return {};
    }

    public hash exceptionInfo(int threadId) {
        # TODO
        return {};
    }

    /*int getFreePgmId() {
        return pgmIdCounter++;
    }

    int getFreeThreadId() {
        return threadIdCounter++;
    }*/

    int getFreeBpId() {
        return bpIdCounter++;
    }

    string getThreadName(softstring tid, hash<ThreadInfo> ti) {
        return "P" + ti.pgmId + "-T" + tid;
    }

    *string findProgramIdByKey(string pgmKey) {
        foreach auto pgm in (session.pgms.pairIterator()) {
            if (pgm.value.name == pgmKey)
                return pgm.key;
        }
        return NOTHING;
    }

    private updateSession() {
        hash data.cmd = 'session/get';
        *hash sh = doCommand(data).result;
        logger.log(0, "got session: %N", sh);
        if (sh) {
            foreach hash ph in (sh.pairIterator()) {
                #*string pgmId = findProgramIdByKey(ph.key);
                string pgmId = ph.key;
                #if (pgmId) {
                if (session.pgms{ph.key}) {
                    #
                    #session.pgms{id}
                }
                else {
                    #pgmId = string(getFreePgmId());
                    session.pgms{pgmId} = new hash<ProgramInfo>(cast<hash<ProgramInfo>>({"scriptName": ph.value.scriptName}));
                    foreach auto th in (ph.value.interrupted) {
                        string tid = string(th);
                        session.threads{tid} = new hash<ThreadInfo>({"pgmId": pgmId});
                    }
                    foreach hash bp in (ph.value.breakpoints) {
                        string bpid = string(getFreeBpId());
                        session.bps{bpid} = new hash<BreakpointInfo>(cast<hash<BreakpointInfo>>({"pgmId": pgmId, "enabled": bp.enabled}));
                    }
                }
            }
        }
        else
            session = new hash<DebugSession>();
    }
}
