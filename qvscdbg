#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%enable-all-warnings
%new-style

%requires qore >= 0.8.13
%requires qlib/VscDebugAdapter.qm
#%requires DebugProgramControl 
%requires ../qore/qlib/DebugProgramControl.qm
# TODO: >= 0.1.2
%allow-debugger
%no-debugging

%exec-class DebugWrapper

class VscDebugAdapterLocal inherits VscDebugAdapter {
    public {
        DebugProgramControlLocal dpc;
        Counter counter();
        any threadData;
        *hash programOpts;
    }
    constructor(DebugProgramControlLocal n_dpc, hash opts): VscDebugAdapter() {
        dpc = n_dpc;
        dpc.vda = self;
        programOpts = opts;
    }
    public *hash doCommandImpl(hash data) {
        if (exists data.tid) {
            while (counter.getCount() > 0) {
                counter.dec();
            }
            counter.inc();
            threadData = NOTHING;
        }
        *hash ret = dpc.processCommand(DebugProgramControlLocal::CX, data);
        if (ret.type == 'thread') {
            if (counter.waitForZero(200)) {
                return NOTHING;
            } else {
                return threadData;
            }
        } else {
            return ret;
        }
    }

}

class DebugProgramControlLocal inherits DebugProgramControl {
    public {
        VscDebugAdapterLocal vda;
    }
    const CX = ('id': 1);
    constructor () : DebugProgramControl(QORE_ARGV[0]) {
        registerConnection(CX);
    }
    destructor() {
        unregisterConnection(CX);
    }
    public sendDataImpl(hash cx, auto data) {    # TODO: nothing needed. why? I cannot reproduce in simple case to report issue
        logger.log(DUV_DEBUG, "sendDataImpl: %y: %y", cx, data);
        if (vda.counter.getCount() > 0) {
            vda.threadData = data;
            vda.counter.dec();
        } else {
            vda.pushEvent(data);
        }
    }
    public broadcastDataImpl(auto data) {
        logger.log(DUV_DEBUG, "broadcastDataImpl: %y: %y", data);
        vda.pushEvent(data);
    }
}

class DebugWrapper {
    private {
        hash opts = (
            'help': 'h,help',
            'verbose': 'v,verbose:+',
            'run': 'r,run',
            "parse_option": "p,set-parse-option=s@",
            #"charset": "c,charset=s",
            "define": "D,define=s@",
            "time_zone": "z,time-zone=s",
            #"exec_class": "x,exec-class:s",
            "log_file": "l=s",
            "append_to_log": "a",
        );
        VscDebugAdapterLocal vda;
        VscDebugLogger logger;
    }

    constructor() {
        GetOpt g(opts);
        hash opt;
        try {
            opt = g.parse2(\ARGV);
        } catch (hash ex) {
            stderr.printf("%s: %s\n", ex.err, ex.desc);
            help(-1);
        }

        if (opt.help) {
            help();
        }
        if (!opt.verbose) {
            remove opt.logfile;
        } else if (!exists opt.logfile) {
            if (PlatformOS == "Windows") {
                opt.logfile = getenv("APPDATA") + DirSep + "QoreDebugAdapter" + DirSep + "qda.log";
            } else {
                opt.logfile = getenv("HOME") + DirSep + ".qoredebugadapter.log";
            }
        }
        logger = new VscDebugLogger(opt.logfile, opt.append_to_log === True);
        if (opt.verbose) {
            logger.verbose = opt.verbose;
        }
        DebugProgramControlLocal dpcl();
        vda = new VscDebugAdapterLocal(dpcl, opt);
        vda.logger = logger;
        vda.dpc.logger = logger;
        logger.debugAdapter = vda;
        try {
            #vda.init(opt);
            vda.run();

            # resume any blocked debug threads
            dpcl.shutdown();
        } catch (hash e) {
            stderr.printf("%s: %s\n", e.err, e.desc);
            exit(-1);
        }

    }

    private help(int exCode=1) {
        printf("usage: %s [options]\n"
            "  -v     verbose\n"
            "  -h     help\n"
            #"  -c, --charset=arg            sets default character set encoding\n"
            "  -D, --define=arg             sets the value of a parse define\n"
            "  -p, --set-parse-option=arg   set parse option (ex: -pno-database)\n"
            #"  -x, --exec-class[=arg]       instantiate class with same name as file name\n"
            #"                               (override with arg, also sets --no-top-level)\n"
            "  -z, --time-zone=arg          sets the time zone from the argument; can be\n"
            "                               either a region name (ex: 'Europe/Prague') or a\n"
            "                               UTC offset with format S[DD[:DD[:DD]]], S=+ or -  TODO\n"
            "  -l     logger filename\n"
            "  -a     append to logfile\n",

            "\n"
            "Example:\n"
            "  %s -v -l /tmp/vscda.log\n"
            "\n"
            ,
            get_script_name(),

        );
        exit(exCode);
    }


    public dummy() {
    }
}
